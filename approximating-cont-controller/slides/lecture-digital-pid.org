#+OPTIONS: toc:nil
# #+LaTeX_CLASS: koma-article 

#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation,aspectratio=1610]
#+OPTIONS: H:2

#+LaTex_HEADER: \usepackage{khpreamble}
#+LaTex_HEADER: \usepackage{amssymb}
#+LaTex_HEADER: \DeclareMathOperator{\shift}{q}
#+LaTex_HEADER: \DeclareMathOperator{\diff}{p}

#+title: Digital PID
#+date: 2021-07-12


* What do I want the students to understand?			   :noexport:
  - PID discreto
  - PID tuning
  - Windup?

* Which activities will the students do?			   :noexport:


* Discretization - repetición
** Context
   - Controller \(F(s)\) obtained from a design in continuous time. 
   - Need discrete approxmation in order to implement on a computer

#+begin_export latex
\begin{center}
 \includegraphics[width=0.7\linewidth]{../../figures/fig8-1.png}\\
   {\tiny Åström and Wittenmark \emph{Computer-controlled systems}}
\end{center}
#+end_export

*** Notes							   :noexport:
   When we first encountered the problem of obtaining a discrete model from a continous model, in the case of finding a discrete pulse-tranfer function to describe our continuous-time dynamic plant model, we used zero-order-hold sampling. Why is this not such a good idea for approximating the controller $F(s)$?

** Mapping of the stable region of the s-plane
#+begin_export latex
   \begin{center}
    \includegraphics[width=0.79\linewidth]{../../figures/fig8-2.png}\\
   {\tiny Åström and Wittenmark \emph{Computer-controlled systems}}
   \end{center}
  #+end_export


* PID
** ISA form of the PID
ISA - International Society of Automation

\[ F(s) = K_c\left( 1 + \frac{1}{T_i s} + T_d s\right) \]

With low-pass filter for the derivative part

\[ F(s) = K_c\left( 1 + \frac{1}{T_i s} + \frac{T_d s}{\frac{T_d}{N} s + 1}\right), \quad N \approx 3\; - \; 10 \]

** ISA form of the PID - derivative part

\[ F(s) = K_c\left( 1 + \frac{1}{T_i s} + \frac{T_d s}{\frac{T_d}{N} s + 1}\right), \quad N \approx 3\; - \; 10 \]

*** C1
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:

*Activity* Sketch the Bode plot for the derivative part (\(T_d = 1\), \(N=10\))
\[F_d(s) = \frac{T_d s}{\frac{T_d}{N} s + 1}\] using the low-frequency and high-frequency approximations.
\begin{align*}
 \text{$\omega$ small:} \quad & F_d(i\omega) \approx T_d i\omega \\
 \text{$\omega$ large:} \quad & F_d(i\omega) \approx \frac{T_d i \omega }{\frac{T_d}{N} i\omega} = N
\end{align*}


*** C1
    :PROPERTIES:
    :BEAMER_col: 0.6
    :END:

#+begin_center
\includegraphics[width=\linewidth]{../../figures/bode-derivative-empty}
#+end_center

** ISA form of the PID - derivative part


** ISA form of the PID - derivative part                           :noexport:
\[ F(s) = K_c\left( 1 + \frac{1}{T_i s} + \frac{T_d s}{\frac{T_d}{N} s + 1}\right), \quad N \approx 3\; - \; 10 \]

#+begin_export latex
\begin{center}
  \def\Td{1}
  \def\NN{6}
  \begin{tikzpicture}
    \begin{loglogaxis}[
    clip=false,
    width=14cm,
    height=5cm,
    ylabel={$|F_d(i\omega)|$},
    xlabel={$\omega$},
    ytick={\NN},
    yticklabels={$N$},
    xtick = {0.01, 0.1, 1, 10, 100}, 
    xticklabels={$\frac{0.01}{T_d}$, $\frac{0.1}{T_d}$, $\frac{1}{T_d}$, $\frac{10}{T_d}$, $\frac{100}{T_d}$},
    ]
      \addplot[red!80!black, no marks, domain=0.01:100, samples=20] {\Td*x/sqrt(1 + pow(\Td/\NN * x, 2))};
      \draw[orange, dashed] (axis cs: \NN/\Td, \NN) -- (axis cs: \NN/\Td, 0.003) node[below] {$\frac{N}{Td}$};
    \end{loglogaxis}

 \end{tikzpicture}
\end{center}
#+end_export

** PID with derivative action only on the process variable
   #+begin_export latex
   \begin{center}
     \begin{tikzpicture}[node distance=22mm, block/.style={rectangle, draw, minimum width=15mm}, sumnode/.style={circle, draw, inner sep=2pt}]
    
       \node[coordinate] (input) {};
       \node[sumnode, right of=input, node distance=16mm] (sum) {\tiny $\Sigma$};
       \node[block, right of=sum, node distance=20mm] (pi)  {$F_{PI}(s)$};
       \node[block, below of=pi, node distance=12mm] (dd)  {$F_{D}(s)$};
       \node[sumnode, right of=pi, node distance=30mm] (sum2) {\tiny $\Sigma$};
       \node[coordinate, below of=sum, node distance=22mm] (yy) {};
       \node[coordinate, right of=sum2, node distance=20mm] (output) {};

       \draw[->] (input) -- node[above, pos=0.3] {$r(t)$} (sum);
       \draw[->] (sum) -- node[above] {$e(t)$} (pi);
       \draw[->] (sum2) -- node[above, near end] {$u(t)$} (output);
       \draw[->] (yy) -- node[right, pos=0.2] {$y(t)$} node[pos=0.9, left] {$-$} (sum);
       \draw[->] (pi) -- node[above, near end] {} (sum2);
       \draw[->] (dd) -| node[left, pos=0.9] {$-$} (sum2);
       \draw[->] (yy) |- (dd);
       
     \end{tikzpicture}
   \end{center}

   #+end_export

\[ U(s) = \underbrace{K_c\left( 1 + \frac{1}{T_i s} \right)}_{F_{PI}(s)} E(s) - \underbrace{\frac{T_d s}{\frac{T_d}{N} s + 1}}_{F_{D}}Y(s)\]

* Discretización del PID
** Common discretization of the PID
   #+begin_export latex
   \begin{center}
     \begin{tikzpicture}[node distance=22mm, block/.style={rectangle, draw, minimum width=15mm}, sumnode/.style={circle, draw, inner sep=2pt}]
    
       \node[coordinate] (input) {};
       \node[sumnode, right of=input, node distance=16mm] (sum) {\tiny $\Sigma$};
       \node[block, right of=sum, node distance=27mm] (pi)  {$K_c\frac{1}{T_is}$};
       \node[block, below of=pi, node distance=12mm] (dd)  {$K_c\frac{T_d s}{\frac{T_d}{N} s + 1}$};
       \node[block, above of=pi, node distance=12mm] (pp)  {$K_c$};
       \node[sumnode, right of=pi, node distance=30mm] (sum2) {\tiny $\Sigma$};
       \node[coordinate, below of=sum, node distance=22mm] (yy) {};
       \node[coordinate, right of=sum2, node distance=20mm] (output) {};

       \draw[->] (input) -- node[above, pos=0.3] {$r(t)$} (sum);
       \draw[->] (sum) -- node[above, pos=0.2] {$e(t)$} node[coordinate, pos=0.6] (copy) {} (pi);
       \draw[->] (sum2) -- node[above, near end] {$u(t)$} (output);
       \draw[->] (yy) -- node[right, pos=0.2] {$y(t)$} node[pos=0.9, left] {$-$} (sum);
       \draw[->] (pi) -- node[above, ] {$u_I(t)$} (sum2);
       \draw[->] (dd) -| node[left, pos=0.9] {$-$} node[above, pos=0.3] {$u_D(t)$} (sum2);
       \draw[->] (yy) |- (dd);
       \draw[->] (pp) -| node[above, pos=0.3] {$u_P(t)$} (sum2);
       \draw[->] (copy) |- (pp);

       
     \end{tikzpicture}
   \end{center}

   #+end_export

\[ U(s) = U_P(s) + U_I(s) - U_D(s) = K_cE(s) + K_c\frac{1}{T_i s} E(s) - \frac{T_d s}{\frac{T_d}{N} s + 1}Y(s) \]

*Activity* 1) Use Euler's method \(s \approx \frac{z-1}{h}\) for the integral part, and the backward difference \(s \approx \frac{z-1}{zh}\) for the derivative part. 2) Apply the inverse z-transform to obtain the controller in the form of a difference equation.

** Common discretization of the PID  - Solution                    :noexport:
*** Proportional part
    Very simple: \(u_P(kh) = K_c e(kh)\)
*** Integral part
    Substitute \(s = \frac{z-1}{h}\) in the transfer function \(F_I(s) = K_c \frac{1}{T_i s}\)
    \[ F_{I,d}(z) = K_c\frac{1}{T_i \frac{z-1}{h}} = K_c \frac{\frac{h}{T_i}}{z-1}\]
    \[U_I(z) = K_c \frac{\frac{h}{T_i}}{z-1} E(z), \qquad \text{}\]
    \[U_I(z)(z-1) = K_c \frac{h}{T_i} E(z), \qquad \text{Apply inverse z-transform}\]
    \[ u_I(kh+h) - u_I(kh) = K_c \frac{h}{T_i} e(kh) \qquad \Leftrightarrow \qquad u_I(kh+h) = u_I(kh) + K_c\frac{h}{T_i} e(kh)\]

** Common discretization of the PID  - Solution                    :noexport:
*** Derivative part
    Substitute \(s = \frac{z-1}{zh}\) in the transfer function \(F_D(s) = K_c \frac{T_d s}{\frac{T_d}{N} s + 1}\)
    \[ F_{D,d}(z) = K_c\frac{T_d \frac{z-1}{zh}}{\frac{T_d}{N}\cdot\frac{z-1}{zh}+1} 
         = K_c \frac{T_d(z-1)}{\frac{T_d}{N}(z-1) + zh} 
= K_c \frac{T_d(z-1)}{(\frac{T_d}{N}+h)z -\frac{T_d}{N}} \]
\[ U_D(z) = K_c \frac{T_d(z-1)}{(\frac{T_d}{N}+h)z -\frac{T_d}{N}} Y(z)\]
\[ \Big((\frac{T_d}{N}+h)z -\frac{T_d}{N}\Big) U_D(z) = K_cT_d(z-1) Y(z), \qquad \text{Apply the inverse z-transform} \]
\[ (\frac{T_d}{N}+h)u_D(kh+h) -\frac{T_d}{N}u_D(kh) = K_cT_d\big(y(kh+h) - y(kh)\big)\]

** The discrete PID algorithm
    \begin{align*}
    &\text{Dado:}  \;  y(kh-h), \; u_I(kh-h), \; u_D(kh-h)\\
    & \text{\textcolor{green!60!black}{Sample signals:}} \; r(kh), \; y(kh)\\
    &e(kh) = r(kh) - y(kh)\\
    &u_P(kh) = K_ce(kh)\\
    &u_D(kh) = \frac{\frac{T_d}{N}}{\frac{T_d}{N} + h}u_D(kh-h) + K_c\frac{T_d}{\frac{T_d}{N} + h}\big(y(kh) - y(kh-h)\big)\\
    &u(kh) = u_P(kh) + u_I(kh-h) + u_D(kh), \qquad \text{\textcolor{red}{Send to DAC}}\\
    &u_I(kh) = u_I(kh-h) + K_c \frac{h}{T_i} e(kh)
    \end{align*}

    #+BEANER: \pause
    
    #+begin_export latex
    \begin{center}
      \begin{tikzpicture}
	\draw[->] (0,0) -- (10,0) node[below] {$t$};
	\draw (2,0) -- (2,-0.2) node[below] {$kh-h$};
	\draw (4,0) -- (4,-0.2) node[below] {$kh$};
	\draw (6,0) -- (6,-0.2) node[below] {$kh+h$};
	\draw[green!60!black, dashed] (4,0) -- (4, 1) node[above] {Sampling signals};
	\draw[red, dashed] (4.2,0) -- (4.2, -0.9) node[below] {Calculations done};
	\draw[blue, ultra thick] (4,0) -- (4.2,0) node[coordinate, pin=45:{Computational delay}] {};
      \end{tikzpicture}
    \end{center}
    #+end_export

