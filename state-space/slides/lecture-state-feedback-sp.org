#+OPTIONS: toc:nil
# #+LaTeX_CLASS: koma-article 

#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation,aspectratio=1610]
#+OPTIONS: H:2
# #+BEAMER_THEME: Madrid
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)
     
#+LaTex_HEADER: \usepackage{khpreamble, euscript}
#+LaTex_HEADER: \DeclareMathOperator{\atantwo}{atan2}
#+LaTex_HEADER: \newcommand*{\ctrb}{\EuScript{C}}
#+LaTex_HEADER: \newcommand*{\obsv}{\EuScript{O}}

#+title: Control computarizado - Retroalimentación de estados

* What do I want the students to understand?			   :noexport:
  - Understand state feedback design

* Which activities will the students do?			   :noexport:
  1. Calculate characteristic equation feedback for double integrator
  2. Write pseudo code to compute control signal


* Apollo moon lander
** Ejemplo - El módulo lunar de Apollo

   #+begin_export latex
   \begin{center}
   \includegraphics[width=\linewidth]{fig-apollo}
   \end{center}
   #+end_export

*** Notas                                                          :noexport:
    Ayer vímos este modelo del módulo lunar de Apollo. El modelo es para el control de la velocidad horizaontal, z dot. Cambié la dirección de esta flecha que representa el empuje del propulsor principal, para que enseña la fuerza que actua en el módulo. Para que este se mantenga a cierta distancia del superficie de la luna, esta fuerza tiene que tener un componente vertical con magnitúd mg, donde este g es la acceleration de gravedad en el superficie de la luna, que es 1.62 m/s^2.

    Cuando el módulo tiene un  angula al respeto al vertical, esta fuerza de propulso va a tener un componente horizontal. Cual es su magnitúd?

    La dinámica del sistema está expresado abajo en forma de un diagrama de bloques. La señal de entrada es el torque causada por los propulsores de atitúd. Esta causa una acceleracińo angular del módulo de 1/J por el torque, dónde J es el momento de inertia. Integrando la acceleración nos da la velocidad angular. 

    Si vemos las fuerzas en la dirección horizontal, vemos que 
    m\ddot{z} = F_h = mg tan\theta
    \ddot{z} = g \tan\theta \approz g \theta, entonces k2=g

    Integrando la acceleración nos da la velocidad.

    La approximación lineal tiene la función de transferencia G = k_1k_2/s^3 = (g/J) / s^3

    Es una sistema de orden tres, entonces se necesita tres variables de estado para representar su dinámica. 
** Ejemplo - El módulo lunar de Apollo

   #+begin_export latex
   \begin{center}
   \includegraphics[width=0.8\linewidth]{fig-apollo}
   \end{center}
   #+end_export
   *Actividad* ¿Que sensores relevantes se puede usar para el control?

*** Notas                                                          :noexport:
    Pláticamos ayer de los sensores que se puede utilizar para medir el estado del módulo. 

    
** Ejemplo - El módulo lunar de Apollo
   #+begin_export latex
   \begin{center}
   \includegraphics[width=0.7\linewidth]{../../figures/mit_LM_autopilot.png}
   \end{center}
   {\footnotesize ``Dynamics and control challenges during the Apollo project'' MIT OCW}
   #+end_export

*** Notas                                                          :noexport:
    Y leí en este documento, que la verdad tenia un IMU. Yo pensaba que el sensor principal para medir el angula (atitúd) era un star tracker. Posiblemente se complica el uso del star tracker cerca del superficie por el polvo en el aire, causado por el propulsador. 

** Ejemplo - El módulo lunar de Apollo

   #+begin_export latex
   \begin{center}
   \includegraphics[width=0.7\linewidth]{fig-apollo}
   \end{center}
   #+end_export

   Variables del estado: \( x = \begin{bmatrix} x_1 & x_2 & x_3 \end{bmatrix}^T = \begin{bmatrix} \dot{\theta} & \theta & \dot{z} \end{bmatrix}^T\). Con dinamica
   \[ \begin{cases} \dot{x}_1 =  \ddot{\theta} = k_1 u\\ \dot{x}_2 = \dot{\theta} = x_1\\ \dot{x}_3 = \ddot{z} = k_2\theta = k_2x_2 \end{cases} \]

** Ejemplo - El módulo lunar de Apollo
   Variables del estado: \( x = \begin{bmatrix} x_1 & x_2 & x_3 \end{bmatrix}^T = \begin{bmatrix} \dot{\theta} & \theta & \dot{z} \end{bmatrix}^T\). Con dinamica
   \[ \begin{cases} \dot{x}_1 =  \ddot{\theta} = k_1 u\\ \dot{x}_2 = \dot{\theta} = x_1\\ \dot{x}_3 = \ddot{z} = k_2\theta = k_2x_2 \end{cases} \]

   \[ \dot{x} = \begin{bmatrix} \dot{x}_1\\\dot{x}_2\\\dot{x}_3\end{bmatrix} = \underbrace{\begin{bmatrix} \textcolor{red!60!black}{0} & \textcolor{red!60!black}{0} &\textcolor{red!60!black}{0} \\\textcolor{red!60!black}{1} & \textcolor{red!60!black}{0}& \textcolor{red!60!black}{0}\\ \textcolor{red!60!black}{0}& \textcolor{red!60!black}{k_2} &\textcolor{red!60!black}{0} \end{bmatrix}}_{A} \begin{bmatrix} x_1\\x_2\\x_3\end{bmatrix} + \underbrace{\begin{bmatrix} \textcolor{red!60!black}{k_1} \\ \textcolor{red!60!black}{0} \\\textcolor{red!60!black}{0}  \end{bmatrix}}_{B} u \]


* Matlab demo
** Matlab / Simulink

* Discretización

** Discretización
** Discretización
   Solución general de un sistema lineal en espacio de estado 
   \begin{align*}
   x(t_k+\tau)& = \mathrm{e}^{A(\tau)} x(t_k) + \int_{0}^\tau \mathrm{e}^{As} B u\big((t_k+\tau)-s) ds
   \end{align*}
   
   #+begin_export latex
   \begin{center}
     \begin{tikzpicture}
       \draw[->] (-3,0) -- (6,0) node[below] {$t$};
       \draw (-2, 0.2) -- ( -2, 0) node[below] {$t_k=kh$};
       \draw (1, 0.2) -- ( 1, 0) node[below] {$t_{k+1}=kh+h$};
       \draw (4, 0.2) -- ( 4, 0) node[below] {$kh+2h$};
       \draw[thick, orange!90!black] (-3,0.3) -- (-2, 0.3) -- (-2,1) -- (1, 1) -- (1,0.8) -- (4, 0.8) --(4, 0.5) --(5.5, 0.5) node[pos=0.1, coordinate, pin=30:{$u(t)$}] {} ; 
       \draw[->] (-2, -0.7) -- (0, -0.7) node[below] {$\tau$};
     \end{tikzpicture}
   \end{center}
   #+end_export

   \begin{align*}
    x(kh+h) &= \mathrm{e}^{Ah} x(kh) + \int_{0}^{h} \mathrm{e}^{As} B u(kh+h-s) ds\\
     &= \underbrace{\mathrm{e}^{Ah}}_{\Phi(h)} x(kh) + \underbrace{\left(\int_{0}^h \mathrm{e}^{As} B ds \right)}_{\Gamma(h)} u(kh)
  \end{align*}

** Discretización - La exponencial de una matriz
   Matriz \(A\) cuadrada. Variable \(t\) escalar.
   \[ \mathrm{e}^{At} = 1 + At + \frac{t^2}{2!}A^2 + \frac{t^3}{3!} A^3 + \cdots\]
   Transformada de Laplace:
   \[ \laplace{\mathrm{e}^{At}} = (sI - A)^{-1}\]
   


** Discretización - Apollo LM
   \begin{align*}
    x(kh+h) &= \mathrm{e}^{Ah} x(kh) + \int_{0}^{h} \mathrm{e}^{As} B u(kh+h-s) ds\\
     &= \underbrace{\mathrm{e}^{Ah}}_{\Phi(h)} x(kh) + \underbrace{\left(\int_{0}^h \mathrm{e}^{As} B ds \right)}_{\Gamma(h)} u(kh)
  \end{align*}
   \[ A = \begin{bmatrix} 0 & 0 & 0\\1 & 0 & 0\\0 & k_2 & 0\end{bmatrix}, \quad A^2 = \begin{bmatrix} 0 & 0 & 0\\1 & 0 & 0\\0 & k_2 & 0\end{bmatrix}\begin{bmatrix} 0 & 0 & 0\\1 & 0 & 0\\0 & k_2 & 0\end{bmatrix}= \begin{bmatrix} 0 & 0 & 0\\0 & 0 & 0\\k_2 & 0  & 0\end{bmatrix}, \quad A^3 = 0\]
   Entonces,
  \begin{align*}
   \Phi(h) &= \mathrm{e}^{Ah} = 1 + Ah + A^2 h^2/2  + \cdots \\
   &= &
   \end{align*}

** Discretización - Apollo LM - Solución
   \begin{align*}
    x(kh+h) &= \mathrm{e}^{Ah} x(kh) + \int_{0}^{h} \mathrm{e}^{As} B u(kh+h-s) ds\\
     &= \underbrace{\mathrm{e}^{Ah}}_{\Phi(h)} x(kh) + \underbrace{\left(\int_{0}^h \mathrm{e}^{As} B ds \right)}_{\Gamma(h)} u(kh)
  \end{align*}
   \[ A = \begin{bmatrix} 0 & 0 & 0\\1 & 0 & 0\\0 & k_2 & 0\end{bmatrix}, \quad A^2 = \begin{bmatrix} 0 & 0 & 0\\1 & 0 & 0\\0 & k_2 & 0\end{bmatrix}\begin{bmatrix} 0 & 0 & 0\\1 & 0 & 0\\0 & k_2 & 0\end{bmatrix}= \begin{bmatrix} 0 & 0 & 0\\0 & 0 & 0\\k_2 & 0  & 0\end{bmatrix}, \quad A^3 = 0\]
   Entonces,
  \begin{align*}
   \Phi(h) &= \mathrm{e}^{Ah} = 1 + Ah + A^2 h^2/2  + \cdots \\
   &= \begin{bmatrix} 1 & 0 & 0\\0 & 1 & 0\\0 & 0 & 1\end{bmatrix} + \begin{bmatrix} 0 & 0 & 0\\1 & 0 & 0\\0 & k_2 & 0\end{bmatrix}h + \begin{bmatrix} 0 & 0 & 0\\0 & 0 & 0\\k_2 & 0 & 0\end{bmatrix}\frac{h^ 2}{2}= \begin{bmatrix} 1 & 0 & 0\\h & 1 & 0\\\frac{h^2k_2}{2} & hk_2 & 1\end{bmatrix}
   \end{align*}

** Discretización - Apollo LM
   \begin{align*}
    x(kh+h) &= \mathrm{e}^{Ah} x(kh) + \int_{0}^{h} \mathrm{e}^{As} B u(kh+h-s) ds\\
     &= \underbrace{\mathrm{e}^{Ah}}_{\Phi(h)} x(kh) + \underbrace{\left(\int_{0}^h \mathrm{e}^{As} B ds \right)}_{\Gamma(h)} u(kh)
  \end{align*}
  \[\mathrm{e}^{As}B &=  \begin{bmatrix} 1 & 0 & 0\\h & 1 & 0\\\frac{s^2k_2}{2} & sk_2 & 1\end{bmatrix} \begin{bmatrix} k_1\\0\\0 \end{bmatrix} = k_1 \begin{bmatrix} 1\\s\\\frac{k_2s^2}{2} \end{bmatrix}
  \]
  \begin{align*}
  \Gamma (h) &= \int_0^h \mathrm{e}^{As}B ds =  
  \end{align*}

** Discretización - Apollo LM - Solución
   \begin{align*}
    x(kh+h) &= \mathrm{e}^{Ah} x(kh) + \int_{0}^{h} \mathrm{e}^{As} B u(kh+h-s) ds\\
     &= \underbrace{\mathrm{e}^{Ah}}_{\Phi(h)} x(kh) + \underbrace{\left(\int_{0}^h \mathrm{e}^{As} B ds \right)}_{\Gamma(h)} u(kh)\\
     &= \begin{bmatrix} 1 & 0 & 0\\h & 1 & 0\\\frac{h^2k_2}{2} & hk_2 & 1\end{bmatrix} x(kh) + k_1 \begin{bmatrix} h\\ \frac{h^2}{2} \\ \frac{k_2 h^3}{6} \end{bmatrix} u(kh)
  \end{align*}

** Discretización - ejercicio                                      :noexport:
   *Actividad* Discretizar el sistema 
   \[ \dot(x) = Ax + Bu = \begin{bmatrix} 0 & 1\\ 0 & 0 \end{bmatrix} x + \begin{bmatrix}0\\1\end{bmatrix}\]


  


* Solución                                                         :noexport:
** Solución del sistema en espacio de estados discreto
   El sistema
   \begin{equation*}
   x(k+1)=\Phi x(k) + \Gamma u(k), \quad x(0)= x_0
   \end{equation*}
   tiene la solución
   \[x(n) = \Phi^n x_0 + \sum_{k=1}^n \Phi^{k-1} \Gamma u(n-k)\]
   
   *Verificación* Enseña \(x(n+1) = \Phi x(n) + \Gamma u(n)\)
   \begin{align*}
   x(n+1) &= \Phi^{n+1}x_0 + \sum_{k=1}^{n+1} \Phi^{k-1} \Gamma u(n+1-k)\\
          &= \Phi \Phi^{n}x_0 + \Phi \left( \sum_{k=2}^{n+1} \Phi^{k-2} \Gamma u(n+1-k) \right) + \Gamma u(n), \quad m = k-1\\
          &= \Phi \left( \Phi^{n}x_0 +  \sum_{m=1}^{n} \Phi^{m-1} \Gamma u(n-m) \right) + \Gamma u(n) 
	  = \Phi x(n) + \Gamma u(n).
   \end{align*}


** Solución del sistema discreto - ejercicio
   \begin{equation*}
   x(k+1)=\Phi x(k) + \Gamma u(k), \quad x(0)= x_0
   \end{equation*}
   tiene la solución
   \[x(n) = \Phi^n x_0 + \sum_{k=1}^n \Phi^{k-1} \Gamma u(n-k)\]

   Calcula la respuesta al impulso del sistema 
   \[ x(k+1) = \begin{bmatrix} 2 & 0\\0 & \frac{1}{2} \end{bmatrix} x(n) + \begin{bmatrix} 1\\1\end{bmatrix} u(k) \]

   #+begin_export latex
      \begin{center}
	\begin{tikzpicture}
	  \begin{axis}[
	    width=14cm,
	    height=2.5cm,
	    xlabel={$k$},
	    ylabel={$u(k)$},
	    xmin=-2.5,
	    xmax=10.5,
	    ]
         
	    \addplot+[black, ycomb, domain=-2:10, samples=13,variable=k] { (k==0) }; 
         
	  \end{axis}
	\end{tikzpicture}
      \end{center}
   #+end_export

** Solución del sistema discreto - ejercicio
   \begin{equation*}
   x(k+1)=\Phi x(k) + \Gamma u(k), \quad x(0)= x_0
   \end{equation*}
   tiene la solución
   \[x(n) = \Phi^n x_0 + \sum_{k=1}^n \Phi^{k-1} \Gamma u(n-k)\]

   Calcula la respuesta al impulso del sistema 
   \[ x(k+1) = \begin{bmatrix} 2 & 0\\0 & \frac{1}{2} \end{bmatrix} x(n) + \begin{bmatrix} 1\\1\end{bmatrix} u(k) \]
   Nota que \(x_0 = 0\) (sistema relajado), y que 
   \[ \sum_{k=1}^n \Phi^{k-1} \Gamma u(n-k) = \Phi^{n-1}\Gamma = \begin{bmatrix}2 & 0\\0 & \frac{1}{2} \end{bmatrix}^{n-1} \begin{bmatrix}1\\1\end{bmatrix}\]

   


* Estabilidad
** Estabilidad
** Eigenvalores y eigenvectores
   *Definición* Eigenvalores \(\lambda  \in \mathbb{R} \) y eigenvectores \(v \in \mathbb{R}^n\) de una matriz \(\Phi \in \mathbb{R}^{n\times{}n}\) son pares \((\lambda, v \neq 0 )\) que satisfican
   \[ \Phi v = \lambda v \]

** Estabilidad
   El sistema
   \begin{equation*}
   x(k+1)=\Phi x(k), \ \ x(0)=x_0
   \end{equation*}
   es *estable* si  $\underset{t\to\infty}{\lim}x(kh)=0, \quad \forall\;  x_0\in\Bbb{R}^n$.

   Un requisito necessario y suficiente para estabilidad, es que *todos los eigenvalores (valores característicos) de \(\Phi\) están en el interior del círculo unitario.*
   
   Los *eigenvalores* de \(\Phi\) son los *polos* del sistema.

** Eigenvalores y eigenvectores - ejercicio                        :noexport:
   *Actividad* Verifica que el vector 
   \[ v = \begin{bmatrix}1\\0\end{bmatrix}\]
   es un eigenvector de 
   \[ \Phi = \begin{bmatrix} 2 & 0\\0 & \frac{1}{2} \end{bmatrix}. \]
   Cuál es el eigenvalor correspondiente?

* Controlabilidad y observabilidad                                 :noexport:

** Controlabilidad
   Controlabilidad es la respuesta a la pregunta /Podemos llegar a cualquier punto en el espacio de estados con una secuencia \(u(k),\; k=0,1,2,\ldots,n-1\) bien eligida?/

Considera
\[ x(k+1) = \Phi x(k) + \Gamma u(k), \quad x(0)= x_0 \]
con solución
\begin{equation}
\begin{split}
x(n) &= \Phi^nx(0) + \Phi^{n-1}\Gamma u(0) + \cdots + \Gamma u(n-1)\\
     &= \Phi^nx(0) + W_c U, 
\end{split}
\end{equation}
dónde
\begin{align*}
W_c &= \bbm \Gamma & \Phi\Gamma & \cdots & \Phi^{n-1}\Gamma\ebm\\
U &= \bbm u(n-1) & u(n-2) & \cdots & u(0) \ebm\transp
\end{align*}

** Controlabilidad
Para encontrar la secuencia de entrada \(u(k)\) que lleva el estado de \(x(0)=x_0\) a \(x(n) = x_d\) podemos despejar a \(U\) en la ecuación
\[ x_d = \Phi^nx_0 + W_cU.\]

\[ U = W_c\inv \left(x_d - \Phi^nx(0)\right) \]

Esto require que la matriz \(W_x\) es *invertible*:

El sistem de espacio de estados arriba es controlable si y solo si la /matriz de controlabilidad/ \(W_c\)  tenga rango \(n\). 
\[ \det W_c \neq 0.\]

* Observability                                           :noexport:noexport:
** Observability
Observability is the answer to the question "Can we determine the initial state \(x(0)\) if we only know \(y(k), \; k=0,1,2,\ldots, n-1\)?"

The first \(n\) values of the output sequence are given by
\begin{align*}
y(0) &= Cx(0)\\
y(1) &= Cx(1) = C \left( \Phi x(0) + \Gamma u(0)  \right)\\
& \vdots\\
y(n-1) &= Cx(n-1) = C \left( \Phi^{n-1} x(0) + W_c U \right).
\end{align*}
This gives the equation
\[ \bbm C\\C\Phi\\\vdots\\C\Phi^{n-1} \ebm x(0) = \bbm y(0)\\y(1) - C\Gamma u(0)\\\vdots\\ y(n-1) - CW_c U\ebm \]
which can be solved for \(x(0)\) if and only if the matrix 
\[W_o = \bbm C\\C\Phi\\\vdots\\C\Phi^{n-1} \ebm\] has full rank.

** Observability, contd
The equation
\[ \bbm C\\C\Phi\\\vdots\\C\Phi^{n-1} \ebm x(0) = \bbm y(0)\\y(1) - C\Gamma u(0)\\\vdots\\ y(n-1) - CW_c U\ebm \]
 can be solved for \(x(0)\) if and only if the matrix 
\[W_o = \bbm C\\C\Phi\\\vdots\\C\Phi^{n-1} \ebm\] has full rank. If this is the case, the system is said to be *observable*.

* State feedback
** Control por retroalimentación de estados
** Retroalimentación de estados
   Dado
   \begin{equation}
   \begin{split}
    x(k+1) &= \Phi x(k) + \Gamma u(k)\\
    y(k) &= C x(k)
   \end{split}
   \label{eq:ssmodel}
  \end{equation}
  y medidas (o valores estimados) del vector de estado \(x(k)\). 

  *Reltroalimentación lineal de estados* es la ley de control
  \begin{equation*}
  \begin{split}
   u(k) &= f\big((x(k), u_c(k)\big) = -l_1x_1(k) - l_2x_2(k) - \cdots - l_n x_n(k) + l_0u_c(k)\\
        &= -Lx(k) + l_0u_c(k), 
  \end{split}
  \end{equation*}
  dónde \[ L = \bbm l_1 & l_2 & \cdots & l_n \ebm. \]
  Sustitoyende la ley de control en el modelo en espacio de estado \eqref{eq:ssmodel} da 
   \begin{equation}
   \begin{split}
    x(k+1) &= \left(\Phi -\Gamma L \right) x(k) + m\Gamma u_c(k)\\
    y(k) &= C x(k)
   \end{split}
   \label{eq:closedloop}
  \end{equation}

** Asignación de polos por retroalimentación de estados
   Dado ubicación deseada de los polos del lazo cerrado \(p_1, p_2, \ldots, p_n\), correspondiente al polinomio característico deseado
   \begin{equation}
   a_c(z) = (z-p_1)(z-p_2)\cdots(z-p_n) = z^n + \alpha_1 z^{n-1} + \cdots \alpha_n.
   \label{eq:desiredpoles}
   \end{equation}

   Retroalimentación de estados nos da el sistema 
   \begin{equation}
   \begin{split}
    x(k+1) &= \left(\Phi -\Gamma L \right) x(k) + l_0\Gamma u_c(k)\\
    y(k) &= C x(k)
   \end{split}
   \label{eq:closedloop}
  \end{equation}
  con polinomio característico
   \begin{equation}
   \det\left(zI - (\Phi - \Gamma L)\right) = z^n + \beta_1(l_1,\ldots,l_n) z^{n-1} + \cdots \beta_n(l_1, \ldots, l_n).
   \label{eq:poles}
   \end{equation}
  
   Equipara los coeficientes de \eqref{eq:desiredpoles} con los de \eqref{eq:poles} para obtener sistema de ecuaciones
   \begin{equation*}
   \begin{split}
   \beta_1(l_1, \ldots, l_n) &= \alpha_1\\
   \beta_2(l_1, \ldots, l_n) &= \alpha_2\\
   &\vdots\\
   \beta_n(l_1, \ldots, l_n) &= \alpha_n
   \end{split}
   \label{eq:coeffs}
   \end{equation*}

** Asignación de polos por retroalimentación de estados
   El sistema de ecuaciones
   \begin{equation*}
   \begin{split}
   \beta_1(l_1, \ldots, l_n) &= \alpha_1\\
   \beta_2(l_1, \ldots, l_n) &= \alpha_2\\
   &\vdots\\
   \beta_n(l_1, \ldots, l_n) &= \alpha_n
   \end{split}
   \label{eq:coeffs}
   \end{equation*}
   siempre es lineal en los parámetros del controlador, cuál nos da
   \begin{equation*}
   M L\transp = \alpha,
   \end{equation*}
   dónde \(\alpha\transp = \bbm \alpha_1 & \alpha_2 & \cdots & \alpha_n \ebm.\)

** Asignación de polos y controlabilidad
   Se puede verificar que la matriz de controlabilidad 
   \[W_c = \bbm \Gamma & \Phi\Gamma & \cdots & \Phi^{n-1}\Gamma\ebm\]
   es un factór de la matriz \(M\)
   \[ M = \bar{M} W_c. \] Entonces, en general las ecuaciones
   \begin{equation}
   \bar{M}W_c L\transp = \alpha \qquad \Rightarrow \qquad L\transp = W_c^{-1}\bar{M}^{-1}\alpha
   \label{eq:poleplace}
   \end{equation}
   solo tienen una solución si \(W_c\) es invertible, es decir cuando el sistema es /controlable/.

   Nota que las ecuaciones \eqref{eq:poleplace} pueden tener soluciónes (numero infinito) cuando el sistema no es controlable, si  *\(\alpha\) está en el espacio de columnas de \(M\)*. Es decir, se puede escribir 
  \[ \alpha = b_1 M_{:,1} + b_2M_{:,2} + \cdots + b_M_{:,m}, \; m < n \]
 
** Asignación de polos por retroalimentación de estados
   Dado ubicación deseada de los polos del lazo cerrado \(p_1, p_2, \ldots, p_n\), correspondiente al polinomio característico deseado
   \begin{equation}
   a_c(z) = (z-p_1)(z-p_2)\cdots(z-p_n) = z^n + \alpha_1 z^{n-1} + \cdots \alpha_n.
   \end{equation}
   y sistema de espacio de estado en lazo cerrado
   \begin{equation}
   \begin{split}
    x(k+1) &= \left(\Phi -\Gamma L \right) x(k) + l_0\Gamma u_c(k)\\
    y(k) &= C x(k)
   \end{split}
  \end{equation}

  Matlab (/control systems toolbox/) tiene dos métodos para calcular las ganancias $L$

  1. *Método de Ackerman* 
     #+begin_src octave
	L = acker(Phi, Gamma, pd)
     #+end_src
  1. *Método numericamente estable* 
     #+begin_src octave
	L = place(Phi, Gamma, pd)
     #+end_src

** La ganancia \(l_0\) de la referencia

   El sistema de espacio de estado en lazo cerrado
   \begin{equation*}
   \begin{split}
    x(k+1) &= \underbrace{\left(\Phi -\Gamma L \right)}_{\Phi_c} x(k) + l_0\Gamma u_c(k)\\
    y(k) &= C x(k)
   \end{split}
   \end{equation*}
   tiene la solución en estado estacionario (\(x(k+1)=x(k)\)) con referencia constante \(u_c(k) = u_{c,f}\)
   \[ y_f = l_0 C(I - \Phi_c)^{-1}\Gamma u_{c,f}.\]
   Queremos \(y_f =  u_{c,f}\),
   \[ \Rightarrow \qquad l_0 = \frac{1}{C(I-\Phi_c)^{-1}\Gamma}\]

** Matlab   
** Actividad
   En grupos: 
   1. Visualiza la atitúd (angulo \(\theta\) en grados) del módulo lunar durante la simulación. Cuál es el angulo máximo?
   2. Determina las ganancias \(L = \bbm l_1 & l_2 & l_3 \ebm\) para control /dead-beat/. Es decir con todos los polos del sistema en lazo cerrado en el origen.
   3. Simula el sistema en lazo cerrado con control dead-beat. Cuál es el angulo máximo del módulo lunar?
   4. Cambia el periodo de muestreo de \(h=1\)s a \(h=0.5\)s. Cuál es el angulo máximo ahora, usando control  dead-beat.
