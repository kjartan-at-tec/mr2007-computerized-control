{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Incremental control example\n",
    "Åström & Wittenmark Problem 5.3\n",
    "\n",
    "We have plant model\n",
    "$$ H(z) = \\frac{z+0.7}{z^2 - 1.8z + 0.81} $$\n",
    "and controller\n",
    "$$ F_b(z) = \\frac{s_0z^2 + s_1z + s_2}{(z-1)(z + r_1)} $$\n",
    "Want closed-loop characteristic polynomial $A_c(z) = z^2 - 1.5z + 0.7$ and observer poles in the range $0<\\alpha<a$.\n",
    "### Diophantine equation\n",
    "$$  (z^2 - 1.8z + 0.81)(z-1)(z+r_1) + (z+0.7)(s_0z^2 + s_1z + s_2) = (z-\\alpha)^2(z^2-1.5z+0.7) $$\n",
    "\\begin{align}\n",
    "(z^2 - 1.8z + 0.81)(z^2 +(r_1-1)z - r_1) + s_0z^3 + s_1z^2 + s_2z + 0.7s_0z^2 + 0.7s_1z + 0.7s_2 &= \\\\ \\qquad\\qquad\\qquad\\qquad\\qquad\\qquad (z^2 -2\\alpha z + \\alpha^2)(z^2 - 1.5z + 0.7)\\\\\n",
    "(z^4 - 1.8z^3 + 0.81z^2 + (r_1-1)z^3 - 1.8(r_1-1)z^2 + 0.81(r_1-1)z - r_1z^2 + 1.8r_1z - 0.81r_1 + \\\\\n",
    "\\qquad\\qquad\\qquad s_0z^3 + s_1z^2 + s_2z + 0.7s_0z^2 + 0.7s_1z + 0.7s_2 = \\\\\n",
    "\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad z^4 - 2\\alpha z^3 + \\alpha^2 z^2 -1.5z^3 + 3\\alpha z^2 - 1.5\\alpha^2 z + 0.7z^2 - 1.4\\alpha z + 0.7\\alpha^2\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Resulting equations when setting coefficients equal\n",
    "\\begin{align}\n",
    "\\begin{cases} z^3: & r_1 + s_0 = 1.8 + 1 -1.5 -2\\alpha\\\\\n",
    "              z^2: & -2.8 r_1 + 0.7s_0 + s_1 = -0.81 -1.8 +0.7 + \\alpha^2 + 3\\alpha\\\\\n",
    "              z^1: &  2.61r_1 + 0.7s_1 + s_2 = 0.81 -1.5\\alpha^2 - 1.4\\alpha\\\\\n",
    "              z^0: & -0.81r_1 + 0.7s_2 = 0.7\\alpha^2  \\end{cases}\n",
    "\\end{align}\n",
    "\n",
    "### Feedforward part of controller\n",
    "$$T(z) = t_0A_o(z) = t_0(z-\\alpha)^2$$\n",
    "$$ G_c(z) = \\frac{T(z)B(z)}{A_o(z)A_c(z)} = \\frac{t_0 B(z)}{A_c(z)}, \\quad \\text{want}\\, G_c(1)=1$$\n",
    "$$t_0 = \\frac{A_c(1)}{B(1)} = \\frac{1 - 1.5+0.7}{1+0.7} = \\frac{2}{17}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import sympy as sy\n",
    "import control.matlab as cm\n",
    "import ipywidgets as widgets\n",
    "%matplotlib widget"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Symbolic solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "sy.init_printing()\n",
    "alphaa, hh, r1, s0, s1,s2 = sy.symbols('alpha, h, r1, s0, s1,s2', \n",
    "                                        real=True)\n",
    "zz = sy.symbols('z', real=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\operatorname{Poly}{\\left( - 0.81 r_{1} + 0.7 s_{2} + 1.0 z^{4} + z^{3} \\left(1.0 r_{1} + 1.0 s_{0} - 2.8\\right) + z^{2} \\left(- 2.8 r_{1} + 0.7 s_{0} + 1.0 s_{1} + 2.61\\right) + z \\left(2.61 r_{1} + 0.7 s_{1} + 1.0 s_{2} - 0.81\\right), z, domain=\\mathbb{R}\\left[r_{1}, s_{0}, s_{1}, s_{2}\\right] \\right)}$$"
      ],
      "text/plain": [
       "Poly(1.0*z**4 + (1.0*r1 + 1.0*s0 - 2.8)*z**3 + (-2.8*r1 + 0.7*s0 + 1.0*s1 + 2.\n",
       "61)*z**2 + (2.61*r1 + 0.7*s1 + 1.0*s2 - 0.81)*z - 0.81*r1 + 0.7*s2, z, domain=\n",
       "'RR[r1,s0,s1,s2]')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = zz**2 - 1.8*zz + 0.81\n",
    "B = zz+0.7\n",
    "R = (zz-1)*(zz+r1)\n",
    "S = s0*zz**2 + s1*zz + s2\n",
    "LHS = sy.Poly(A*R + B*S, zz)\n",
    "LHS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left [ 2.0 \\alpha + 1.0 r_{1} + 1.0 s_{0} - 1.3, \\quad - 1.0 \\alpha^{2} - 3.0 \\alpha - 2.8 r_{1} + 0.7 s_{0} + 1.0 s_{1} + 1.91, \\quad 1.5 \\alpha^{2} + 1.4 \\alpha + 2.61 r_{1} + 0.7 s_{1} + 1.0 s_{2} - 0.81, \\quad - 0.7 \\alpha^{2} - 0.81 r_{1} + 0.7 s_{2}\\right ]$$"
      ],
      "text/plain": [
       "⎡                                         2                                   \n",
       "⎣2.0⋅α + 1.0⋅r₁ + 1.0⋅s₀ - 1.3, - - -1.0⋅α  - -3.0⋅(-1)⋅α - -2.8⋅(-1)⋅r₁ + 0.7\n",
       "\n",
       "                          2                                                   \n",
       "⋅s₀ + 1.0⋅s₁ + 1.91, 1.5⋅α  + 1.4⋅α + 2.61⋅r₁ + 0.7⋅s₁ + 1.0⋅s₂ - 0.81, - - -0\n",
       "\n",
       "    2                      ⎤\n",
       ".7⋅α  - - -0.81⋅r₁ + 0.7⋅s₂⎦"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RHS = sy.Poly((zz-alphaa)**2*(zz**2 - 1.5*zz + 0.7), zz)\n",
    "Dioph = LHS-RHS\n",
    "coeffs = Dioph.all_coeffs()\n",
    "coeffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "sol=sy.solve(coeffs, [r1,s0, s1,s2]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Effect of observer pole"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c04fb7b8bf7c42e19a7e0e1425be4b89",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FigureCanvasNbAgg()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "213331ac6aa142fab91a2b220d1ea2b5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatSlider(value=0.4, description='alpha', max=0.9, step=0.02), Output()), _dom_classes…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "h = 1\n",
    "# The plant\n",
    "H = cm.tf([1, 0.7], [1, -1.8, 0.81], h)\n",
    "\n",
    "\n",
    "# set up plot\n",
    "fig, ax = plt.subplots(figsize=(8, 4))\n",
    "#ax.set_ylim([-.1, 4])\n",
    "ax.grid(True)\n",
    "\n",
    "def bode_S_T_and_Gc(alpha):\n",
    "    \"\"\"\n",
    "    Returns the bode plot data for S and T given observer pole\n",
    "    \"\"\"\n",
    "    r1n = float(sol[r1].subs({alphaa: alpha}))\n",
    "    s0n = float(sol[s0].subs({alphaa: alpha}))\n",
    "    s1n = float(sol[s1].subs({alphaa: alpha}))\n",
    "    s2n = float(sol[s2].subs({alphaa: alpha}))\n",
    "    \n",
    "    B = [1, 0.7]\n",
    "    Ac = [1, -1.5, 0.7]\n",
    "    Rp = np.convolve([1, r1n],[1,-1])\n",
    "    Fb = cm.tf([s0n, s1n, s2n], Rp , h)\n",
    "    Ff = np.sum(Ac)/np.sum(B) * cm.tf(np.convolve([1, -alpha], [1, -alpha]), Rp, h)\n",
    "                    \n",
    "    #Gc = cm.minreal(Ff * cm.feedback(H, Fb))\n",
    "    Gc = Ff * cm.feedback(H, Fb)\n",
    "    Ss = cm.feedback(1, H*Fb)\n",
    "    Ts = cm.feedback(H*Fb, 1)\n",
    "\n",
    "    Gcbode = cm.bode(Gc, omega_limits=[0.01, 3], Plot=False)\n",
    "    Sbode = cm.bode(Ss, omega_limits=[0.01, 3], Plot=False)\n",
    "    Tbode = cm.bode(Ts, omega_limits=[0.01,3], Plot=False)\n",
    "    \n",
    "    return (Sbode, Tbode, Gcbode)\n",
    "    \n",
    "\n",
    "@widgets.interact(alpha=(0, 0.9, 0.02))\n",
    "def update(alpha = 0.4):\n",
    "    \"\"\"Remove old lines from plot and plot new one\"\"\"\n",
    "    [l.remove() for l in ax.lines]\n",
    "    [l.remove() for l in ax.lines]\n",
    "    Sb, Tb, Gb = bode_S_T_and_Gc(alpha)\n",
    "    sh = ax.loglog(Sb[2], Sb[0], color='C0', label='Ss')\n",
    "    th = ax.loglog(Tb[2], Tb[0], color='C1', label='Ts')\n",
    "    gh = ax.loglog(Gb[2], Gb[0], color='C2', label='Gc')\n",
    "    ax.legend(loc='lower center')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
